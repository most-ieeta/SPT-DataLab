/* This file is part of SPT Data Lab.
*
* Copyright (C) 2019, University of Aveiro, 
* DETI - Departament of Electronic, Telecommunications and Informatics.
* 
* SPT Data Lab is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* SPT Data Lab is distributed "AS IS" in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with SPT Data Lab; if not, write to the Free Software
* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
package ua.ieeta.sptdatalab.app;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 * 
 * Panel located above the 2 panels with the images with legends and the currently selected files.
 */
public class LegendPanel extends javax.swing.JPanel implements PropertyChangeListener {

    private String sourceImageFile;
    private String targetImageFile;
    private String sourceCorrFile;
    private String targetCorrFile;
    private int numberSourceImageFile;
    private int numberTargetImageFile;
    private int numberSourceCorrFile;
    private int numberTargetCorrFile;
    private boolean isInterpolationShowing = false;
    private final int maxStringSize = 80;//maximum number of chars in text for some labels
    
    public LegendPanel() {
        sourceImageFile = "";
        targetImageFile = "";
        numberSourceImageFile = 0;
        numberTargetImageFile = 1;
        AppImage.getInstance().addPropertyChangeListener(this);
        AppCorrGeometries.getInstance().addPropertyChangeListener(this);
        initComponents();
        updateFilesInLegend();
    }
    
    public void propertyChange(PropertyChangeEvent evt) {
        switch(evt.getPropertyName()){
            case AppConstants.IMAGE_LEFT_PANEL_PROPERTY:
                this.numberSourceImageFile = Integer.parseInt(evt.getNewValue().toString());
                break;
            case AppConstants.IMAGE_RIGHT_PANEL_PROPERTY:
                this.numberTargetImageFile = Integer.parseInt(evt.getNewValue().toString());
                break;
            case AppConstants.INTERPOLATION_SHOWING:
                this.isInterpolationShowing = Boolean.parseBoolean(evt.getNewValue().toString());
                break;
        }
        updateFilesInLegend();
    }
    
    private void updateFilesInLegend(){
        sourceImageFile = limitStringSize(AppImage.getInstance().getImageName(numberSourceImageFile));
        targetImageFile = limitStringSize(AppImage.getInstance().getImageName(numberTargetImageFile));
        setTextForSource();
        setTextForTarget();
    }
    
    private void setTextForSource(){
        String text = "<html>"
                      + "<font size=+2 color=red>Source</font>";
        if (isInterpolationShowing)
            text += "<font color=blue>     (Showing result of interpolation)</font>";
        text+= "<br/> Image: " + sourceImageFile
            + "</html>";
        this.sourceLabel.setText(text);
    }
    
    private void setTextForTarget(){
        String text = "<html>"
                      + "<font size=+2 color=red>Target</font><br/>"
                      + "Image: " + targetImageFile;
        text += "</html>";
        this.targetLabel.setText(text);
    }
    
    //limite the size of the text shown in the labels
    private String limitStringSize(String str){
        if (str.length() <= maxStringSize)
            return str;
       return "..."+str.substring(str.length() - maxStringSize, str.length());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sourceLabel = new javax.swing.JLabel();
        targetLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        sourceLabel.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 20, 0, 0);
        add(sourceLabel, gridBagConstraints);

        targetLabel.setText("jLabel4");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 20);
        add(targetLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JLabel targetLabel;
    // End of variables declaration//GEN-END:variables
}
